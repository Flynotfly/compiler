Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    ARRAY
    BOOL_CONST
    BREAK
    CLASS
    COMMA
    COMMENT
    COMMENT_MULTI
    DIM
    DIVIDE
    DOUBLE_CONST
    ELSE
    EQUAL
    EQUAL_EQUAL
    EXTENDS
    FOR
    GREATER_EQUAL
    GREATER_THAN
    IDENTIFIER
    IF
    IMPLEMENTS
    INTERFACE
    INT_CONST
    LEFT_BRACE
    LEFT_BRACKET
    LEFT_PAREN
    LESS_EQUAL
    LESS_THAN
    MINUS
    MODULO
    NEW
    NEWARRAY
    NOT
    NOT_EQUAL
    NULL
    OR
    PERIOD
    PLUS
    PRINT
    READINTEGER
    READLINE
    RETURN
    RIGHT_BRACE
    RIGHT_BRACKET
    RIGHT_PAREN
    STRING_CONST
    THIS
    TIMES
    VOID
    WHILE

Grammar

Rule 0     S' -> program
Rule 1     program -> decllist
Rule 2     decllist -> decl
Rule 3     decllist -> decllist decl
Rule 4     decl -> variabletype ID SEMICOLON
Rule 5     variabletype -> INT
Rule 6     variabletype -> DOUBLE
Rule 7     variabletype -> STRING
Rule 8     variabletype -> BOOL

Terminals, with rules where they appear

AND                  : 
ARRAY                : 
BOOL                 : 8
BOOL_CONST           : 
BREAK                : 
CLASS                : 
COMMA                : 
COMMENT              : 
COMMENT_MULTI        : 
DIM                  : 
DIVIDE               : 
DOUBLE               : 6
DOUBLE_CONST         : 
ELSE                 : 
EQUAL                : 
EQUAL_EQUAL          : 
EXTENDS              : 
FOR                  : 
GREATER_EQUAL        : 
GREATER_THAN         : 
ID                   : 4
IDENTIFIER           : 
IF                   : 
IMPLEMENTS           : 
INT                  : 5
INTERFACE            : 
INT_CONST            : 
LEFT_BRACE           : 
LEFT_BRACKET         : 
LEFT_PAREN           : 
LESS_EQUAL           : 
LESS_THAN            : 
MINUS                : 
MODULO               : 
NEW                  : 
NEWARRAY             : 
NOT                  : 
NOT_EQUAL            : 
NULL                 : 
OR                   : 
PERIOD               : 
PLUS                 : 
PRINT                : 
READINTEGER          : 
READLINE             : 
RETURN               : 
RIGHT_BRACE          : 
RIGHT_BRACKET        : 
RIGHT_PAREN          : 
SEMICOLON            : 4
STRING               : 7
STRING_CONST         : 
THIS                 : 
TIMES                : 
VOID                 : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

decl                 : 2 3
decllist             : 1 3
program              : 0
variabletype         : 4

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . decllist
    (2) decllist -> . decl
    (3) decllist -> . decllist decl
    (4) decl -> . variabletype ID SEMICOLON
    (5) variabletype -> . INT
    (6) variabletype -> . DOUBLE
    (7) variabletype -> . STRING
    (8) variabletype -> . BOOL

    INT             shift and go to state 5
    DOUBLE          shift and go to state 6
    STRING          shift and go to state 7
    BOOL            shift and go to state 8

    program                        shift and go to state 1
    decllist                       shift and go to state 2
    decl                           shift and go to state 3
    variabletype                   shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (1) program -> decllist .
    (3) decllist -> decllist . decl
    (4) decl -> . variabletype ID SEMICOLON
    (5) variabletype -> . INT
    (6) variabletype -> . DOUBLE
    (7) variabletype -> . STRING
    (8) variabletype -> . BOOL

    $end            reduce using rule 1 (program -> decllist .)
    INT             shift and go to state 5
    DOUBLE          shift and go to state 6
    STRING          shift and go to state 7
    BOOL            shift and go to state 8

    decl                           shift and go to state 9
    variabletype                   shift and go to state 4

state 3

    (2) decllist -> decl .

    INT             reduce using rule 2 (decllist -> decl .)
    DOUBLE          reduce using rule 2 (decllist -> decl .)
    STRING          reduce using rule 2 (decllist -> decl .)
    BOOL            reduce using rule 2 (decllist -> decl .)
    $end            reduce using rule 2 (decllist -> decl .)


state 4

    (4) decl -> variabletype . ID SEMICOLON

    ID              shift and go to state 10


state 5

    (5) variabletype -> INT .

    ID              reduce using rule 5 (variabletype -> INT .)


state 6

    (6) variabletype -> DOUBLE .

    ID              reduce using rule 6 (variabletype -> DOUBLE .)


state 7

    (7) variabletype -> STRING .

    ID              reduce using rule 7 (variabletype -> STRING .)


state 8

    (8) variabletype -> BOOL .

    ID              reduce using rule 8 (variabletype -> BOOL .)


state 9

    (3) decllist -> decllist decl .

    INT             reduce using rule 3 (decllist -> decllist decl .)
    DOUBLE          reduce using rule 3 (decllist -> decllist decl .)
    STRING          reduce using rule 3 (decllist -> decllist decl .)
    BOOL            reduce using rule 3 (decllist -> decllist decl .)
    $end            reduce using rule 3 (decllist -> decllist decl .)


state 10

    (4) decl -> variabletype ID . SEMICOLON

    SEMICOLON       shift and go to state 11


state 11

    (4) decl -> variabletype ID SEMICOLON .

    INT             reduce using rule 4 (decl -> variabletype ID SEMICOLON .)
    DOUBLE          reduce using rule 4 (decl -> variabletype ID SEMICOLON .)
    STRING          reduce using rule 4 (decl -> variabletype ID SEMICOLON .)
    BOOL            reduce using rule 4 (decl -> variabletype ID SEMICOLON .)
    $end            reduce using rule 4 (decl -> variabletype ID SEMICOLON .)

